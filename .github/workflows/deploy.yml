name: 🚀 Deploy

on:
  push:
    branches:
      - main  # Only trigger on push to main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  deployments: write
  statuses: write
  pages: write
  id-token: write

jobs:
  deploy:
    # Skip push events on PR branches
    if: github.event_name != 'push' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'pull_request' && 'preview' || 'github-pages' }}
      url: ${{ steps.url.outputs.url }}
    outputs:
      preview_url: ${{ steps.url.outputs.url }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔧 Get branch name
        id: branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, use the head branch name
            BRANCH="${{ github.event.pull_request.head.ref }}"
          else
            # For direct pushes, use the branch name
            BRANCH="${GITHUB_REF#refs/heads/}"
          fi
          
          # Clean branch name for URL
          BRANCH=$(echo "$BRANCH" | sed 's/[^a-zA-Z0-9._-]/-/g')
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "clean_branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: 🛠️ Build with branch-specific base
        run: |
          echo "Building with base: $(echo $GITHUB_REPOSITORY)/${{ steps.branch.outputs.clean_branch }}/"
          npm run build

      - name: 🔗 Output Deployed URL
        id: url
        run: |
          BRANCH="${{ steps.branch.outputs.clean_branch }}"
          REPO=${GITHUB_REPOSITORY#*/}
          URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/$REPO/$BRANCH/"
          
          echo "✅ Preview URL: $URL"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: 📦 Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist
          name: github-pages-${{ steps.branch.outputs.clean_branch }}

      - name: 🚀 Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ steps.branch.outputs.clean_branch }}
          preview: true
          path: ${{ steps.branch.outputs.clean_branch }}

      - name: 💬 Comment Preview URL on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = '${{ steps.url.outputs.url }}';
            const newComment = `## 🚀 Preview Deployment

            Your preview deployment is ready!

            **Preview URL**: ${url}

            > Note: This preview will be automatically updated when you push new changes to this PR.`;
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🚀 Preview Deployment')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: newComment
              });
            } else {
              // Create new comment if none exists
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: newComment
              });
            }
